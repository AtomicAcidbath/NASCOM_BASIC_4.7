0001   0000             ;==================================================================================
0002   0000             ; Contents of this file are copyright Phillip Stevens
0003   0000             ;
0004   0000             ; You have permission to use this for NON COMMERCIAL USE ONLY
0005   0000             ; If you wish to use it elsewhere, please include an acknowledgement to myself.
0006   0000             ;
0007   0000             ; Initialisation routines to suit Z8S180 CPU, with internal USART.
0008   0000             ;
0009   0000             ; Internal USART interrupt driven serial I/O to run modified NASCOM Basic 4.7.
0010   0000             ; Full input and output buffering.
0011   0000             ;
0012   0000             ; https://github.com/feilipu/
0013   0000             ;
0014   0000             ; https://feilipu.me/
0015   0000             ;
0016   0000             ;==================================================================================
0017   0000             ;
0018   0000             ; Z180 Register Mnemonics
0019   0000             ;
0020   0000             
0021   0000             IO_BASE         .EQU    $00     ; Internal I/O Base Address (ICR) <<< SET THIS AS DESIRED >>>
0022   0000             
0023   0000             CNTLA0          .EQU    IO_BASE+$00     ; ASCI Control Reg A Ch 0
0024   0000             CNTLA1          .EQU    IO_BASE+$01     ; ASCI Control Reg A Ch 1
0025   0000             CNTLB0          .EQU    IO_BASE+$02     ; ASCI Control Reg B Ch 0
0026   0000             CNTLB1          .EQU    IO_BASE+$03     ; ASCI Control Reg B Ch 1
0027   0000             STAT0           .EQU    IO_BASE+$04     ; ASCI Status  Reg   Ch 0
0028   0000             STAT1           .EQU    IO_BASE+$05     ; ASCI Status  Reg   Ch 1
0029   0000             TDR0            .EQU    IO_BASE+$06     ; ASCI Tx Data Reg   Ch 0
0030   0000             TDR1            .EQU    IO_BASE+$07     ; ASCI Tx Data Reg   Ch 1
0031   0000             RDR0            .EQU    IO_BASE+$08     ; ASCI Rx Data Reg   Ch 0
0032   0000             RDR1            .EQU    IO_BASE+$09     ; ASCI Rx Data Reg   Ch 1
0033   0000             
0034   0000             ASEXT0          .EQU    IO_BASE+$12     ; ASCI Extension Control Reg Ch 0 (Z8S180 & higher Only)
0035   0000             ASEXT1          .EQU    IO_BASE+$13     ; ASCI Extension Control Reg Ch 1 (Z8S180 & higher Only)
0036   0000             
0037   0000             ASTC0L          .EQU    IO_BASE+$1A     ; ASCI Time Constant Ch 0 Low (Z8S180 & higher Only)
0038   0000             ASTC0H          .EQU    IO_BASE+$1B     ; ASCI Time Constant Ch 0 High (Z8S180 & higher Only)
0039   0000             ASTC1L          .EQU    IO_BASE+$1C     ; ASCI Time Constant Ch 1 Low (Z8S180 & higher Only)
0040   0000             ASTC1H          .EQU    IO_BASE+$1D     ; ASCI Time Constant Ch 1 High (Z8S180 & higher Only)
0041   0000             
0042   0000             CNTR            .EQU    IO_BASE+$0A     ; CSI/O Control Reg
0043   0000             TRDR            .EQU    IO_BASE+$0B     ; CSI/O Tx/Rx Data Reg
0044   0000             
0045   0000             TMDR0L          .EQU    IO_BASE+$0C     ; Timer Data Reg Ch 0 Low
0046   0000             TMDR0H          .EQU    IO_BASE+$0D     ; Timer Data Reg Ch 0 High
0047   0000             RLDR0L          .EQU    IO_BASE+$0E     ; Timer Reload Reg Ch 0 Low
0048   0000             RLDR0H          .EQU    IO_BASE+$0F     ; Timer Reload Reg Ch 0 High
0049   0000             TCR             .EQU    IO_BASE+$10     ; Timer Control Reg
0050   0000             
0051   0000             TMDR1L          .EQU    IO_BASE+$14     ; Timer Data Reg Ch 1 Low
0052   0000             TMDR1H          .EQU    IO_BASE+$15     ; Timer Data Reg Ch 1 High
0053   0000             RLDR1L          .EQU    IO_BASE+$16     ; Timer Reload Reg Ch 1 Low
0054   0000             RLDR1H          .EQU    IO_BASE+$17     ; Timer Reload Reg Ch 1 High
0055   0000             
0056   0000             FRC             .EQU    IO_BASE+$18     ; Free-Running Counter
0057   0000             
0058   0000             CMR             .EQU    IO_BASE+$1E     ; CPU Clock Multiplier Reg (Z8S180 & higher Only)
0059   0000             CCR             .EQU    IO_BASE+$1F     ; CPU Control Reg (Z8S180 & higher Only)
0060   0000             
0061   0000             SAR0L           .EQU    IO_BASE+$20     ; DMA Source Addr Reg Ch0-Low
0062   0000             SAR0H           .EQU    IO_BASE+$21     ; DMA Source Addr Reg Ch0-High
0063   0000             SAR0B           .EQU    IO_BASE+$22     ; DMA Source Addr Reg Ch0-Bank
0064   0000             DAR0L           .EQU    IO_BASE+$23     ; DMA Dest Addr Reg Ch0-Low
0065   0000             DAR0H           .EQU    IO_BASE+$24     ; DMA Dest Addr Reg Ch0-High
0066   0000             DAR0B           .EQU    IO_BASE+$25     ; DMA Dest ADDR REG CH0-Bank
0067   0000             BCR0L           .EQU    IO_BASE+$26     ; DMA Byte Count Reg Ch0-Low
0068   0000             BCR0H           .EQU    IO_BASE+$27     ; DMA Byte Count Reg Ch0-High
0069   0000             MAR1L           .EQU    IO_BASE+$28     ; DMA Memory Addr Reg Ch1-Low
0070   0000             MAR1H           .EQU    IO_BASE+$29     ; DMA Memory Addr Reg Ch1-High
0071   0000             MAR1B           .EQU    IO_BASE+$2A     ; DMA Memory Addr Reg Ch1-Bank
0072   0000             IAR1L           .EQU    IO_BASE+$2B     ; DMA I/O Addr Reg Ch1-Low
0073   0000             IAR1H           .EQU    IO_BASE+$2C     ; DMA I/O Addr Reg Ch2-High
0074   0000             BCR1L           .EQU    IO_BASE+$2E     ; DMA Byte Count Reg Ch1-Low
0075   0000             BCR1H           .EQU    IO_BASE+$2F     ; DMA Byte Count Reg Ch1-High
0076   0000             DSTAT           .EQU    IO_BASE+$30     ; DMA Status Reg
0077   0000             DMODE           .EQU    IO_BASE+$31     ; DMA Mode Reg
0078   0000             DCNTL           .EQU    IO_BASE+$32     ; DMA/Wait Control Reg
0079   0000             
0080   0000             IL              .EQU    IO_BASE+$33     ; INT Vector Low Reg
0081   0000             ITC             .EQU    IO_BASE+$34     ; INT/TRAP Control Reg
0082   0000             
0083   0000             RCR             .EQU    IO_BASE+$36     ; Refresh Control Reg
0084   0000             
0085   0000             CBR             .EQU    IO_BASE+$38     ; MMU Common Base Reg
0086   0000             BBR             .EQU    IO_BASE+$39     ; MMU Bank Base Reg
0087   0000             CBAR            .EQU    IO_BASE+$3A     ; MMU Common/Bank Area Reg
0088   0000             
0089   0000             OMCR            .EQU    IO_BASE+$3E     ; Operation Mode Control Reg
0090   0000             ICR             .EQU    IO_BASE+$3F     ; I/O Control Reg
0091   0000             
0092   0000             
0093   0000             ;==================================================================================
0094   0000             ;
0095   0000             ; Interrupt vectors (offsets) for Z180/HD64180 internal interrupts
0096   0000             ;
0097   0000             
0098   0000             VECTOR_BASE     .EQU   $80      ; Vector Base address (IL) <<< SET THIS AS DESIRED >>>
0099   0000             
0100   0000             VECTOR_INT1     .EQU   VECTOR_BASE+$00    ; external /INT1 
0101   0000             VECTOR_INT2     .EQU   VECTOR_BASE+$02    ; external /INT2 
0102   0000             VECTOR_PRT0     .EQU   VECTOR_BASE+$04    ; PRT channel 0 
0103   0000             VECTOR_PRT1     .EQU   VECTOR_BASE+$06    ; PRT channel 1 
0104   0000             VECTOR_DMA0     .EQU   VECTOR_BASE+$08    ; DMA channel 0 
0105   0000             VECTOR_DMA1     .EQU   VECTOR_BASE+$0A    ; DMA Channel 1 
0106   0000             VECTOR_CSIO     .EQU   VECTOR_BASE+$0C    ; Clocked serial I/O 
0107   0000             VECTOR_ASCI0    .EQU   VECTOR_BASE+$0E    ; Async channel 0 
0108   0000             VECTOR_ASCI1    .EQU   VECTOR_BASE+$10    ; Async channel 1
0109   0000             
0110   0000             ;==================================================================================
0111   0000             ;
0112   0000             ; Some bit definitions used with the Z-180 on-chip peripherals:
0113   0000             ;
0114   0000             
0115   0000             ; ASCI Control Reg A (CNTLAn)
0116   0000             
0117   0000             SER_MPE         .EQU   $80    ; Multi Processor Enable
0118   0000             SER_RE          .EQU   $40    ; Receive Enable
0119   0000             SER_TE          .EQU   $20    ; Transmit Enable
0120   0000             SER_RTS0        .EQU   $10    ; _RTS Request To Send
0121   0000             SER_EFR         .EQU   $08    ; Error Flag Reset
0122   0000             
0123   0000             SER_7N1         .EQU   $00    ; 7 Bits No Parity 1 Stop Bit
0124   0000             SER_7N2         .EQU   $01    ; 7 Bits No Parity 2 Stop Bits
0125   0000             SER_7P1         .EQU   $02    ; 7 Bits    Parity 1 Stop Bit
0126   0000             SER_7P2         .EQU   $03    ; 7 Bits    Parity 2 Stop Bits
0127   0000             SER_8N1         .EQU   $04    ; 8 Bits No Parity 1 Stop Bit
0128   0000             SER_8N2         .EQU   $05    ; 8 Bits No Parity 2 Stop Bits
0129   0000             SER_8P1         .EQU   $06    ; 8 Bits    Parity 1 Stop Bit
0130   0000             SER_8P2         .EQU   $07    ; 8 Bits    Parity 2 Stop Bits
0131   0000             
0132   0000             ; ASCI Control Reg B (CNTLBn)
0133   0000                                           ; BAUD Rate = PHI / PS / SS / DR
0134   0000             
0135   0000             SER_MPBT        .EQU   $80    ; Multi Processor Bit Transmit
0136   0000             SER_MP          .EQU   $40    ; Multi Processor
0137   0000             SER_PS          .EQU   $20    ; Prescale PHI by 10 (PS 0) or 30 (PS 1)
0138   0000             SER_PEO         .EQU   $10    ; Parity Even or Odd
0139   0000             SER_DR          .EQU   $08    ; Divide SS by 16 (DR 0) or 64 (DR 1)
0140   0000             
0141   0000             SER_SS_DIV_1    .EQU   $00    ; Divide PS by  1
0142   0000             SER_SS_DIV_2    .EQU   $01    ; Divide PS by  2
0143   0000             SER_SS_DIV_4    .EQU   $02    ; Divide PS by  4
0144   0000             SER_SS_DIV_8    .EQU   $03    ; Divide PS by  8
0145   0000             SER_SS_DIV_16   .EQU   $04    ; Divide PS by 16
0146   0000             SER_SS_DIV_32   .EQU   $05    ; Divide PS by 32
0147   0000             SER_SS_DIV_64   .EQU   $06    ; Divide PS by 64
0148   0000             SER_SS_EXT      .EQU   $07    ; External Clock Source <= PHI / 40
0149   0000             
0150   0000             ; ASCI Status Reg (STATn)
0151   0000             
0152   0000             SER_RDRF        .EQU   $80    ; Receive Data Register Full
0153   0000             SER_OVRN        .EQU   $40    ; Overrun (Received Byte)
0154   0000             SER_PE          .EQU   $20    ; Parity Error (Received Byte)
0155   0000             SER_FE          .EQU   $10    ; Framing Error (Received Byte)
0156   0000             SER_RIE         .EQU   $08    ; Receive Interrupt Enabled
0157   0000             SER_DCD0        .EQU   $04    ; _DCD0 Data Carrier Detect USART0
0158   0000             SER_CTS1        .EQU   $04    ; _CTS1 Clear To Send USART1
0159   0000             SER_TDRE        .EQU   $02    ; Transmit Data Register Empty
0160   0000             SER_TIE         .EQU   $01    ; Transmit Interrupt Enabled
0161   0000             
0162   0000             ; CPU Clock Multiplier Reg (CMR) (Z8S180 & higher Only)
0163   0000             
0164   0000             CMR_X2          .EQU   $80    ; CPU x2 XTAL Multiplier Mode
0165   0000             CMR_LN_XTAL     .EQU   $40    ; Low Noise Crystal 
0166   0000             
0167   0000             ; CPU Control Reg (CCR) (Z8S180 & higher Only)
0168   0000             
0169   0000             CCR_XTAL_X2     .EQU   $80    ; PHI = XTAL Mode
0170   0000             CCR_STANDBY     .EQU   $40    ; STANDBY after SLEEP
0171   0000             CCR_BREXT       .EQU   $20    ; Exit STANDBY on BUSREQ
0172   0000             CCR_LNPHI       .EQU   $10    ; Low Noise PHI (30% Drive)
0173   0000             CCR_IDLE        .EQU   $08    ; IDLE after SLEEP
0174   0000             CCR_LNIO        .EQU   $04    ; Low Noise I/O Signals (30% Drive)
0175   0000             CCR_LNCPUCTL    .EQU   $02    ; Low Noise CPU Control Signals (30% Drive)
0176   0000             CCR_LNAD        .EQU   $01    ; Low Noise Address and Data Signals (30% Drive)
0177   0000             
0178   0000             ; DMA/Wait Control Reg (DCNTL)
0179   0000             
0180   0000             DCNTL_MWI1      .EQU   $80    ; Memory Wait Insertion 1 (1 Default)
0181   0000             DCNTL_MWI0      .EQU   $40    ; Memory Wait Insertion 0 (1 Default)
0182   0000             DCNTL_IWI1      .EQU   $20    ; I/O Wait Insertion 1 (1 Default)
0183   0000             DCNTL_IWI0      .EQU   $10    ; I/O Wait Insertion 0 (1 Default)
0184   0000             DCNTL_DMS1      .EQU   $08    ; DMA Request Sense 1
0185   0000             DCNTL_DMS0      .EQU   $04    ; DMA Request Sense 0
0186   0000             DCNTL_DIM1      .EQU   $02    ; DMA Channel 1 I/O & Memory Mode
0187   0000             DCNTL_DIM0      .EQU   $01    ; DMA Channel 1 I/O & Memory Mode
0188   0000             
0189   0000             
0190   0000             ; INT/TRAP Control Register (ITC)
0191   0000             
0192   0000             ITC_ITE2        .EQU   $04    ; Interrupt Enable #2
0193   0000             ITC_ITE1        .EQU   $02    ; Interrupt Enable #1
0194   0000             ITC_ITE0        .EQU   $01    ; Interrupt Enable #0 (1 Default)
0195   0000             
0196   0000             ; Refresh Control Reg (RCR)
0197   0000             
0198   0000             RCR_REFE        .EQU   $80    ; DRAM Refresh Enable
0199   0000             RCR_REFW        .EQU   $40    ; DRAM Refresh 2 or 3 Wait states
0200   0000             
0201   0000             ; Operation Mode Control Reg (OMCR)
0202   0000             
0203   0000             OMCR_M1E        .EQU   $80    ; M1 Enable (0 Disabled)
0204   0000             OMCR_M1TE       .EQU   $40    ; M1 Temporary Enable
0205   0000             OMCR_IOC        .EQU   $20    ; IO Control (1 64180 Mode)
0206   0000             
0207   0000             ;==================================================================================
0208   0000             ;
0209   0000             ; Some definitions used with the YAZ-180 on-board peripherals:
0210   0000             ;
0211   0000             
0212   0000             ; BREAK for Single Step Mode
0213   0000             BREAK           .EQU    $2000      ; Any value written to $2000, halts CPU
0214   0000             
0215   0000             ; 82C55 PIO Port Definitions
0216   0000             
0217   0000             PIO             .EQU    $4000      ; Base Address for 82C55
0218   0000             PIOA            .EQU    PIO+$00    ; Address for Port A
0219   0000             PIOB            .EQU    PIO+$01    ; Address for Port B
0220   0000             PIOC            .EQU    PIO+$02    ; Address for Port C
0221   0000             PIOCNTL         .EQU    PIO+$03    ; Address for Control Byte
0222   0000             
0223   0000             ; PIO Mode Definitions
0224   0000             
0225   0000             ; Mode 0 - Basic Input / Output
0226   0000             
0227   0000             PIOCNTL00       .EQU    $80        ; A->, B->, CH->, CL->
0228   0000             PIOCNTL01       .EQU    $81        ; A->, B->, CH->, ->CL
0229   0000             PIOCNTL0        .EQU    $82        ; A->, ->B, CH->, CL->
0230   0000             PIOCNTL03       .EQU    $83        ; A->, ->B, CH->, ->CL
0231   0000             
0232   0000             PIOCNTL04       .EQU    $88        ; A->, B->, ->CH, CL->
0233   0000             PIOCNTL05       .EQU    $89        ; A->, B->, ->CH, ->CL
0234   0000             PIOCNTL06       .EQU    $8A        ; A->, ->B, ->CH, CL->
0235   0000             PIOCNTL07       .EQU    $8B        ; A->, ->B, ->CH, ->CL
0236   0000             
0237   0000             PIOCNTL08       .EQU    $90        ; ->A, B->, CH->, CL->
0238   0000             PIOCNTL09       .EQU    $91        ; ->A, B->, CH->, ->CL
0239   0000             PIOCNTL10       .EQU    $92        ; ->A, ->B, CH->, CL->
0240   0000             PIOCNTL11       .EQU    $83        ; ->A, ->B, CH->, ->CL
0241   0000             
0242   0000             PIOCNTL12       .EQU    $98        ; ->A, B->, ->CH, CL-> (Default Setting)
0243   0000             PIOCNTL13       .EQU    $99        ; ->A, B->, ->CH, ->CL
0244   0000             PIOCNTL14       .EQU    $9A        ; ->A, ->B, ->CH, CL->
0245   0000             PIOCNTL15       .EQU    $9B        ; ->A, ->B, ->CH, ->CL
0246   0000             
0247   0000             ; Mode 1 - Strobed Input / Output
0248   0000             ; TBA Later
0249   0000             
0250   0000             ; Mode 2 - Strobed Bidirectional Bus Input / Output
0251   0000             ; TBA Later
0252   0000             
0253   0000             ; Am9511A-1 FPU Port Address
0254   0000             
0255   0000             FPUDATA         .EQU    $C000      ; FPU Data Port
0256   0000             FPUCNTL         .EQU    $C001      ; FPU Control Port
0257   0000             
0258   0000             
0259   0000             ;==================================================================================
0260   0000             ;
0261   0000             ; DEFINES SECTION
0262   0000             ;
0263   0000             
0264   0000             ROMSTART        .EQU     $0000 ; Bottom of FLASH
0265   0000             ROMSTOP         .EQU     $1FFF ; Top of FLASH
0266   0000             
0267   0000             RAMSTART_CA0    .EQU     $2000 ; Bottom of Common 0 RAM
0268   0000             RAMSTOP_CA0     .EQU     $3FFF ; Top of Common 0 RAM
0269   0000             
0270   0000             RAMSTART_BANK   .EQU     $4000 ; Bottom of Banked RAM
0271   0000             RAMSTOP_BANK    .EQU     $7FFF ; Top of Banked RAM
0272   0000             
0273   0000             RAMSTART_CA1    .EQU     $8000 ; Bottom of Common 1 RAM
0274   0000             RAMSTOP_CA1     .EQU     $FFFF ; Top of Common 1 RAM
0275   0000             
0276   0000             RAMSTART        .EQU     RAMSTART_CA0
0277   0000             RAMSTOP         .EQU     RAMSTOP_CA1
0278   0000             
0279   0000             USRSTART        .EQU     $3000 ; start of USR(x) asm code
0280   0000             
0281   0000             INT0_FPU        .EQU     $3800 ; start of the FPU Interrupt 1 asm code (RAM)
0282   0000             
0283   0000                                            ; Top of BASIC line input buffer (CURPOS WRKSPC+0ABH)
0284   0000                                            ; so it is "free ram" when BASIC resets
0285   0000                                            ; set BASIC Work space WRKSPC $8000, in CA1 RAM
0286   0000             WRKSPC          .EQU     $RAMSTART_CA1 
0287   0000             
0288   0000             TEMPSTACK       .EQU     WRKSPC+$AB
0289   0000             
0290   0000             CR              .EQU     0DH
0291   0000             LF              .EQU     0AH
0292   0000             CS              .EQU     0CH   ; Clear screen
0293   0000             
0294   0000             
0295   0000                                            ; from Nascom Basic Symbol Tables .ORIG $0300
0296   0000             DEINT           .EQU     $0BB7 ; Function DEINT to get USR(x) into DE registers
0297   0000             ABPASS          .EQU     $132D ; Function ABPASS to put output into AB register for return
0298   0000             
0299   0000             
0300   0000             ;==================================================================================
0301   0000             ;
0302   0000             ; CODE SECTION
0303   0000             ;
0304   0000             
0305   3000                     .org USRSTART   ; start from 'X' jump, Basic prompt
0306   3000             
0307   3000                                     ; 82C55 I/O is from $4000 to $4003
0308   3000                                     ; Set Basic I/O Mode 0 Config #12
0309   3000             
0310   3000 CD B7 0B            call DEINT      ; get the USR(x) argument in de
0311   3003                            
0312   3003 01 01 40            ld bc,PIOB      ; Output onto Port B
0313   3006 ED 59               out (c),e       ; put LSB of USR(x) onto Port B
0314   3008                            
0315   3008 01 00 40            ld bc,PIOA      ; Input form Port A
0316   300B ED 78               in a,(c)        ; get LSB from Port A into a
0317   300D                     
0318   300D 47                  ld b,a          ; move Port A into b  
0319   300E                     
0320   300E AF                  xor a           ; zero a         
0321   300F             
0322   300F C3 2D 13            jp ABPASS       ; return the Port A value to USR(x)
0323   3012                     
0324   3012                     
0325   3012                     
0326   3012                     
0327   8003                     .org WRKSPC+3H  ; at the USR(0) jump in Basic
0328   8003                     
0329   8003 C3 00 30            JP 3000H        ; jump to the I/O code.
0330   8006                     
0331   8006                     .end



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
ASEXT0        0012      ASEXT1        0013      ASTC0L        001A      
ASTC0H        001B      ASTC1L        001C      ASTC1H        001D      
ABPASS        132D      BCR0L         0026      BCR0H         0027      
BCR1L         002E      BCR1H         002F      BBR           0039      
BREAK         2000      CNTLA0        0000      CNTLA1        0001      
CNTLB0        0002      CNTLB1        0003      CNTR          000A      
CMR           001E      CCR           001F      CBR           0038      
CBAR          003A      CMR_X2        0080      CMR_LN_XTAL   0040      
CCR_XTAL_X2   0080      CCR_STANDBY   0040      CCR_BREXT     0020      
CCR_LNPHI     0010      CCR_IDLE      0008      CCR_LNIO      0004      
CCR_LNCPUCTL  0002      CCR_LNAD      0001      CR            000D      
CS            000C      DAR0L         0023      DAR0H         0024      
DAR0B         0025      DSTAT         0030      DMODE         0031      
DCNTL         0032      DCNTL_MWI1    0080      DCNTL_MWI0    0040      
DCNTL_IWI1    0020      DCNTL_IWI0    0010      DCNTL_DMS1    0008      
DCNTL_DMS0    0004      DCNTL_DIM1    0002      DCNTL_DIM0    0001      
DEINT         0BB7      FRC           0018      FPUDATA       C000      
FPUCNTL       C001      IO_BASE       0000      IAR1L         002B      
IAR1H         002C      IL            0033      ITC           0034      
ICR           003F      ITC_ITE2      0004      ITC_ITE1      0002      
ITC_ITE0      0001      INT0_FPU      3800      LF            000A      
MAR1L         0028      MAR1H         0029      MAR1B         002A      
OMCR          003E      OMCR_M1E      0080      OMCR_M1TE     0040      
OMCR_IOC      0020      PIO           4000      PIOA          4000      
PIOB          4001      PIOC          4002      PIOCNTL       4003      
PIOCNTL00     0080      PIOCNTL01     0081      PIOCNTL0      0082      
PIOCNTL03     0083      PIOCNTL04     0088      PIOCNTL05     0089      
PIOCNTL06     008A      PIOCNTL07     008B      PIOCNTL08     0090      
PIOCNTL09     0091      PIOCNTL10     0092      PIOCNTL11     0083      
PIOCNTL12     0098      PIOCNTL13     0099      PIOCNTL14     009A      
PIOCNTL15     009B      RDR0          0008      RDR1          0009      
RLDR0L        000E      RLDR0H        000F      RLDR1L        0016      
RLDR1H        0017      RCR           0036      RCR_REFE      0080      
RCR_REFW      0040      ROMSTART      0000      ROMSTOP       1FFF      
RAMSTART_CA0  2000      RAMSTOP_CA0   3FFF      RAMSTART_BANK 4000      
RAMSTOP_BANK  7FFF      RAMSTART_CA1  8000      RAMSTOP_CA1   FFFF      
RAMSTART      2000      RAMSTOP       FFFF      STAT0         0004      
STAT1         0005      SAR0L         0020      SAR0H         0021      
SAR0B         0022      SER_MPE       0080      SER_RE        0040      
SER_TE        0020      SER_RTS0      0010      SER_EFR       0008      
SER_7N1       0000      SER_7N2       0001      SER_7P1       0002      
SER_7P2       0003      SER_8N1       0004      SER_8N2       0005      
SER_8P1       0006      SER_8P2       0007      SER_MPBT      0080      
SER_MP        0040      SER_PS        0020      SER_PEO       0010      
SER_DR        0008      SER_SS_DIV_1  0000      SER_SS_DIV_2  0001      
SER_SS_DIV_4  0002      SER_SS_DIV_8  0003      SER_SS_DIV_16 0004      
SER_SS_DIV_32 0005      SER_SS_DIV_64 0006      SER_SS_EXT    0007      
SER_RDRF      0080      SER_OVRN      0040      SER_PE        0020      
SER_FE        0010      SER_RIE       0008      SER_DCD0      0004      
SER_CTS1      0004      SER_TDRE      0002      SER_TIE       0001      
TDR0          0006      TDR1          0007      TRDR          000B      
TMDR0L        000C      TMDR0H        000D      TCR           0010      
TMDR1L        0014      TMDR1H        0015      TEMPSTACK     80AB      
USRSTART      3000      VECTOR_BASE   0080      VECTOR_INT1   0080      
VECTOR_INT2   0082      VECTOR_PRT0   0084      VECTOR_PRT1   0086      
VECTOR_DMA0   0088      VECTOR_DMA1   008A      VECTOR_CSIO   008C      
VECTOR_ASCI0  008E      VECTOR_ASCI1  0090      WRKSPC        8000      

tasm: Number of errors = 0
